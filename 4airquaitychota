import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler, Binarizer, LabelEncoder
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Load dataset
air = pd.read_csv('airquality.csv')

# Check shape
air.shape
air.head()
air.count()
air.isnull().sum()
air.describe()
air.info()

# Handle missing values
A = air.dropna()
A = air.fillna(0)
A = air.fillna(method='pad')
A = air.fillna(method='backfill')

# Replace NaN in 'Ozone' column
A = air['Ozone'].replace(np.NaN, air['Ozone'].mean())
A = air['Ozone'].replace(np.NaN, air['Ozone'].median())
A = air['Ozone'].replace(np.NaN, air['Ozone'].mode()[0])

# Impute using SimpleImputer
imp = SimpleImputer(missing_values=np.nan, strategy='mean')
A = imp.fit_transform(air)
A = pd.DataFrame(A, columns=air.columns)

# Train-test split
train, test = train_test_split(A, test_size=0.20)

# Scaling
scaler = StandardScaler()
B = scaler.fit_transform(A)
pd.DataFrame(B).describe()

scaler = MinMaxScaler()
B = scaler.fit_transform(A)
B = pd.DataFrame(B).describe()

# Binarization
bin = Binarizer(threshold=0.5)
B = bin.fit_transform(B)
pd.DataFrame(B)

# Label encoding on another dataset
data = pd.read_csv('student.csv')
le = LabelEncoder()
B = data[:]
B['name'] = le.fit_transform(B['name'])

# Linear regression model
X = A['Ozone'].values.reshape(-1, 1)
Y = A['Temp']
model = LinearRegression()
model.fit(X, Y)
model.score(X, Y) * 100
model.predict([[128]])

# Scatter plot
plt.scatter(X, Y)
